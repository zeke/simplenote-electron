/* eslint-disable */
module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
	(function() {
		function peg$subclass(child, parent) {
			function ctor() { this.constructor = child; }
			ctor.prototype = parent.prototype;
			child.prototype = new ctor();
		}

		function peg$SyntaxError(message, expected, found, location) {
			this.message  = message;
			this.expected = expected;
			this.found    = found;
			this.location = location;
			this.name     = "SyntaxError";

			if (typeof Error.captureStackTrace === "function") {
				Error.captureStackTrace(this, peg$SyntaxError);
			}
		}

		peg$subclass(peg$SyntaxError, Error);

		peg$SyntaxError.buildMessage = function(expected, found) {
			var DESCRIBE_EXPECTATION_FNS = {
				literal: function(expectation) {
					return "\"" + literalEscape(expectation.text) + "\"";
				},

				"class": function(expectation) {
					var escapedParts = "",
						i;

					for (i = 0; i < expectation.parts.length; i++) {
						escapedParts += expectation.parts[i] instanceof Array
							? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
							: classEscape(expectation.parts[i]);
					}

					return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
				},

				any: function(expectation) {
					return "any character";
				},

				end: function(expectation) {
					return "end of input";
				},

				other: function(expectation) {
					return expectation.description;
				}
			};

			function hex(ch) {
				return ch.charCodeAt(0).toString(16).toUpperCase();
			}

			function literalEscape(s) {
				return s
					.replace(/\\/g, '\\\\')
					.replace(/"/g,  '\\"')
					.replace(/\0/g, '\\0')
					.replace(/\t/g, '\\t')
					.replace(/\n/g, '\\n')
					.replace(/\r/g, '\\r')
					.replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
					.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
			}

			function classEscape(s) {
				return s
					.replace(/\\/g, '\\\\')
					.replace(/\]/g, '\\]')
					.replace(/\^/g, '\\^')
					.replace(/-/g,  '\\-')
					.replace(/\0/g, '\\0')
					.replace(/\t/g, '\\t')
					.replace(/\n/g, '\\n')
					.replace(/\r/g, '\\r')
					.replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
					.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
			}

			function describeExpectation(expectation) {
				return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
			}

			function describeExpected(expected) {
				var descriptions = new Array(expected.length),
					i, j;

				for (i = 0; i < expected.length; i++) {
					descriptions[i] = describeExpectation(expected[i]);
				}

				descriptions.sort();

				if (descriptions.length > 0) {
					for (i = 1, j = 1; i < descriptions.length; i++) {
						if (descriptions[i - 1] !== descriptions[i]) {
							descriptions[j] = descriptions[i];
							j++;
						}
					}
					descriptions.length = j;
				}

				switch (descriptions.length) {
					case 1:
						return descriptions[0];

					case 2:
						return descriptions[0] + " or " + descriptions[1];

					default:
						return descriptions.slice(0, -1).join(", ")
							+ ", or "
							+ descriptions[descriptions.length - 1];
				}
			}

			function describeFound(found) {
				return found ? "\"" + literalEscape(found) + "\"" : "end of input";
			}

			return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
		};

		function peg$parse(input, options) {
			options = options !== void 0 ? options : {};

			var peg$FAILED = {},

				peg$startRuleFunctions = { Document: peg$parseDocument },
				peg$startRuleFunction  = peg$parseDocument,

				peg$c0 = function(l) { return l },
				peg$c1 = function(ls, l) { return ls.concat( l ) },
				peg$c2 = function(ts) {
					const tokens = ts.reduce(
						function(out, next) {
							return typeof next === 'string' && typeof out[1] === 'string'
								? [ out[0].slice(0, -1).concat( out[0].slice(-1).concat( next ).join('') ), next ]
								: [ out[0].concat( next ), next ];
						},
						[[], undefined]
					)

					return tokens[0].map( function( token ) {
						const value = typeof token === 'string'
							? { type: 'text', text: token }
							: token;

						return Object.assign( { location: location() }, value )
					} )
				},
				peg$c3 = "#",
				peg$c4 = peg$literalExpectation("#", false),
				peg$c5 = /^[^\n]/,
				peg$c6 = peg$classExpectation(["\n"], true, false),
				peg$c7 = function(l, h) { l.length <= 6 },
				peg$c8 = function(l, h) { return { type: 'header', level: l.length, text: h.join(''), location: location() } },
				peg$c9 = ">",
				peg$c10 = peg$literalExpectation(">", false),
				peg$c11 = /^[ \t]/,
				peg$c12 = peg$classExpectation([" ", "\t"], false, false),
				peg$c13 = function(l, q) { return { type: 'blockquote', text: q.join(''), level: 1 + l.length, location: location() } },
				peg$c14 = /^[\-*]/,
				peg$c15 = peg$classExpectation(["-", "*"], false, false),
				peg$c16 = " ",
				peg$c17 = peg$literalExpectation(" ", false),
				peg$c18 = function(s) { return { type: 'list-bullet', text: s.join( '' ), location: location() } },
				peg$c19 = "- [",
				peg$c20 = peg$literalExpectation("- [", false),
				peg$c21 = /^[xX]/,
				peg$c22 = peg$classExpectation(["x", "X"], false, false),
				peg$c23 = "]",
				peg$c24 = peg$literalExpectation("]", false),
				peg$c25 = function(isDone, isNotDone, t) { return { type: 'todo', isDone: !! isDone, text: t.join(''), location: location() } },
				peg$c26 = "**",
				peg$c27 = peg$literalExpectation("**", false),
				peg$c28 = /^[^*]/,
				peg$c29 = peg$classExpectation(["*"], true, false),
				peg$c30 = function(s) { return { type: 'strong', text: s.join(''), location: location() } },
				peg$c31 = "__",
				peg$c32 = peg$literalExpectation("__", false),
				peg$c33 = /^[^_]/,
				peg$c34 = peg$classExpectation(["_"], true, false),
				peg$c35 = "*",
				peg$c36 = peg$literalExpectation("*", false),
				peg$c37 = function(s) { return { type: 'em', text: s.join(''), location: location() } },
				peg$c38 = "_",
				peg$c39 = peg$literalExpectation("_", false),
				peg$c40 = "~~",
				peg$c41 = peg$literalExpectation("~~", false),
				peg$c42 = /^[^~]/,
				peg$c43 = peg$classExpectation(["~"], true, false),
				peg$c44 = function(s) { return { type: 'strike', text: s.join(''), location: location() } },
				peg$c45 = "`",
				peg$c46 = peg$literalExpectation("`", false),
				peg$c47 = /^[^`]/,
				peg$c48 = peg$classExpectation(["`"], true, false),
				peg$c49 = function(s) { return { type: 'code-inline', text: s.join(''), location: location() } },
				peg$c50 = "@",
				peg$c51 = peg$literalExpectation("@", false),
				peg$c52 = /^[a-zA-Z]/,
				peg$c53 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
				peg$c54 = /^[a-zA-Z0-9]/,
				peg$c55 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
				peg$c56 = function(head, tail) { return { type: 'at-mention', text: [head].concat(tail).join(''), location: location() } },
				peg$c57 = "://",
				peg$c58 = peg$literalExpectation("://", false),
				peg$c59 = "/",
				peg$c60 = peg$literalExpectation("/", false),
				peg$c61 = function(scheme, host, slash, path) { return {
					type: 'link',
					text: '',
					href: {
						url: scheme + '://' + [ host, slash, path ].join(''),
						location: location()
					},
					location: location()
				} },
				peg$c62 = /^[a-z]/,
				peg$c63 = peg$classExpectation([["a", "z"]], false, false),
				peg$c64 = /^[a-z0-9+.\-]/,
				peg$c65 = peg$classExpectation([["a", "z"], ["0", "9"], "+", ".", "-"], false, false),
				peg$c66 = function(s, ss) { return s + ss.join('') },
				peg$c67 = ".",
				peg$c68 = peg$literalExpectation(".", false),
				peg$c69 = function(pp, p) { return p },
				peg$c70 = function(pp, ps) { return [pp].concat( ps ).join('.') },
				peg$c71 = /^[0-9a-z\-_~]/,
				peg$c72 = peg$classExpectation([["0", "9"], ["a", "z"], "-", "_", "~"], false, false),
				peg$c73 = function(cs) { return cs.join('') },
				peg$c74 = function(p, t) { return [p, t].join('') },
				peg$c75 = function(ps) { return ps.join('') },
				peg$c76 = function(c, ccs) { return '.' + ccs.join('') },
				peg$c77 = function(c, cs) { return [c.join('')].concat( cs ).join('') },
				peg$c78 = /^[a-z0-9\-_~]/,
				peg$c79 = peg$classExpectation([["a", "z"], ["0", "9"], "-", "_", "~"], false, false),
				peg$c80 = "<a",
				peg$c81 = peg$literalExpectation("<a", false),
				peg$c82 = /^[ ]/,
				peg$c83 = peg$classExpectation([" "], false, false),
				peg$c84 = function(a) { return a },
				peg$c85 = /^[^<]/,
				peg$c86 = peg$classExpectation(["<"], true, false),
				peg$c87 = "</a>",
				peg$c88 = peg$literalExpectation("</a>", false),
				peg$c89 = function(as, a, text) { return {
					type: 'link',
					text: text.join(''),
					href: {
						url: as.concat( a ).find( a => 'href' === a.name ).value,
						location: as.concat( a ).find( a => 'href' === a.name ).location
					}
				} },
				peg$c90 = "=",
				peg$c91 = peg$literalExpectation("=", false),
				peg$c92 = function(name, v) { return { v: v.s, l: v.l } },
				peg$c93 = function(name, value) { return { name: name.join(''), value: value.v, location: value.l } },
				peg$c94 = "\"",
				peg$c95 = peg$literalExpectation("\"", false),
				peg$c96 = /^[^"]/,
				peg$c97 = peg$classExpectation(["\""], true, false),
				peg$c98 = function(s) { return { v: s.join(''), l: location() } },
				peg$c99 = function(string) { return { s: string.v, l: string.l } },
				peg$c100 = "[",
				peg$c101 = peg$literalExpectation("[", false),
				peg$c102 = /^[^\]]/,
				peg$c103 = peg$classExpectation(["]"], true, false),
				peg$c104 = "](",
				peg$c105 = peg$literalExpectation("](", false),
				peg$c106 = /^[^)]/,
				peg$c107 = peg$classExpectation([")"], true, false),
				peg$c108 = function(text, url) { return { url: url, location: location() } },
				peg$c109 = ")",
				peg$c110 = peg$literalExpectation(")", false),
				peg$c111 = function(text, href) { return {
					type: 'link',
					text: text.join( '' ),
					href: { url: href.url.join( '' ), location: href.location }
				} },
				peg$c112 = /^[\n]/,
				peg$c113 = peg$classExpectation(["\n"], false, false),

				peg$currPos          = 0,
				peg$savedPos         = 0,
				peg$posDetailsCache  = [{ line: 1, column: 1 }],
				peg$maxFailPos       = 0,
				peg$maxFailExpected  = [],
				peg$silentFails      = 0,

				peg$result;

			if ("startRule" in options) {
				if (!(options.startRule in peg$startRuleFunctions)) {
					throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
				}

				peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
			}

			function text() {
				return input.substring(peg$savedPos, peg$currPos);
			}

			function location() {
				return peg$computeLocation(peg$savedPos, peg$currPos);
			}

			function expected(description, location) {
				location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

				throw peg$buildStructuredError(
					[peg$otherExpectation(description)],
					input.substring(peg$savedPos, peg$currPos),
					location
				);
			}

			function error(message, location) {
				location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

				throw peg$buildSimpleError(message, location);
			}

			function peg$literalExpectation(text, ignoreCase) {
				return { type: "literal", text: text, ignoreCase: ignoreCase };
			}

			function peg$classExpectation(parts, inverted, ignoreCase) {
				return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
			}

			function peg$anyExpectation() {
				return { type: "any" };
			}

			function peg$endExpectation() {
				return { type: "end" };
			}

			function peg$otherExpectation(description) {
				return { type: "other", description: description };
			}

			function peg$computePosDetails(pos) {
				var details = peg$posDetailsCache[pos], p;

				if (details) {
					return details;
				} else {
					p = pos - 1;
					while (!peg$posDetailsCache[p]) {
						p--;
					}

					details = peg$posDetailsCache[p];
					details = {
						line:   details.line,
						column: details.column
					};

					while (p < pos) {
						if (input.charCodeAt(p) === 10) {
							details.line++;
							details.column = 1;
						} else {
							details.column++;
						}

						p++;
					}

					peg$posDetailsCache[pos] = details;
					return details;
				}
			}

			function peg$computeLocation(startPos, endPos) {
				var startPosDetails = peg$computePosDetails(startPos),
					endPosDetails   = peg$computePosDetails(endPos);

				return {
					start: {
						offset: startPos,
						line:   startPosDetails.line,
						column: startPosDetails.column
					},
					end: {
						offset: endPos,
						line:   endPosDetails.line,
						column: endPosDetails.column
					}
				};
			}

			function peg$fail(expected) {
				if (peg$currPos < peg$maxFailPos) { return; }

				if (peg$currPos > peg$maxFailPos) {
					peg$maxFailPos = peg$currPos;
					peg$maxFailExpected = [];
				}

				peg$maxFailExpected.push(expected);
			}

			function peg$buildSimpleError(message, location) {
				return new peg$SyntaxError(message, null, null, location);
			}

			function peg$buildStructuredError(expected, found, location) {
				return new peg$SyntaxError(
					peg$SyntaxError.buildMessage(expected, found),
					expected,
					found,
					location
				);
			}

			function peg$parseDocument() {
				var s0, s1, s2, s3, s4;

				s0 = peg$currPos;
				s1 = [];
				s2 = peg$currPos;
				s3 = peg$parseLine();
				if (s3 !== peg$FAILED) {
					s4 = peg$parseNewline();
					if (s4 !== peg$FAILED) {
						peg$savedPos = s2;
						s3 = peg$c0(s3);
						s2 = s3;
					} else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				} else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = peg$currPos;
					s3 = peg$parseLine();
					if (s3 !== peg$FAILED) {
						s4 = peg$parseNewline();
						if (s4 !== peg$FAILED) {
							peg$savedPos = s2;
							s3 = peg$c0(s3);
							s2 = s3;
						} else {
							peg$currPos = s2;
							s2 = peg$FAILED;
						}
					} else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parseLine();
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c1(s1, s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseLine() {
				var s0, s1, s2;

				s0 = peg$parseHeader();
				if (s0 === peg$FAILED) {
					s0 = peg$parseBlockQuote();
					if (s0 === peg$FAILED) {
						s0 = peg$parseToDoItem();
						if (s0 === peg$FAILED) {
							s0 = peg$parseBulletItem();
							if (s0 === peg$FAILED) {
								s0 = peg$currPos;
								s1 = [];
								s2 = peg$parseToken();
								while (s2 !== peg$FAILED) {
									s1.push(s2);
									s2 = peg$parseToken();
								}
								if (s1 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c2(s1);
								}
								s0 = s1;
							}
						}
					}
				}

				return s0;
			}

			function peg$parseHeader() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				s1 = [];
				if (input.charCodeAt(peg$currPos) === 35) {
					s2 = peg$c3;
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c4); }
				}
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						if (input.charCodeAt(peg$currPos) === 35) {
							s2 = peg$c3;
							peg$currPos++;
						} else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c4); }
						}
					}
				} else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c5.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c6); }
					}
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						if (peg$c5.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c6); }
						}
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = peg$currPos;
						s3 = peg$c7(s1, s2);
						if (s3) {
							s3 = peg$FAILED;
						} else {
							s3 = void 0;
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c8(s1, s2);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseBlockQuote() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 62) {
					s1 = peg$c9;
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c10); }
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					s3 = peg$currPos;
					s4 = [];
					if (peg$c11.test(input.charAt(peg$currPos))) {
						s5 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s5 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c12); }
					}
					while (s5 !== peg$FAILED) {
						s4.push(s5);
						if (peg$c11.test(input.charAt(peg$currPos))) {
							s5 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c12); }
						}
					}
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 62) {
							s5 = peg$c9;
							peg$currPos++;
						} else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c10); }
						}
						if (s5 !== peg$FAILED) {
							s4 = [s4, s5];
							s3 = s4;
						} else {
							peg$currPos = s3;
							s3 = peg$FAILED;
						}
					} else {
						peg$currPos = s3;
						s3 = peg$FAILED;
					}
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						s3 = peg$currPos;
						s4 = [];
						if (peg$c11.test(input.charAt(peg$currPos))) {
							s5 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c12); }
						}
						while (s5 !== peg$FAILED) {
							s4.push(s5);
							if (peg$c11.test(input.charAt(peg$currPos))) {
								s5 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s5 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c12); }
							}
						}
						if (s4 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 62) {
								s5 = peg$c9;
								peg$currPos++;
							} else {
								s5 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c10); }
							}
							if (s5 !== peg$FAILED) {
								s4 = [s4, s5];
								s3 = s4;
							} else {
								peg$currPos = s3;
								s3 = peg$FAILED;
							}
						} else {
							peg$currPos = s3;
							s3 = peg$FAILED;
						}
					}
					if (s2 !== peg$FAILED) {
						s3 = [];
						if (peg$c11.test(input.charAt(peg$currPos))) {
							s4 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c12); }
						}
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							if (peg$c11.test(input.charAt(peg$currPos))) {
								s4 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c12); }
							}
						}
						if (s3 !== peg$FAILED) {
							s4 = [];
							if (peg$c5.test(input.charAt(peg$currPos))) {
								s5 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s5 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c6); }
							}
							if (s5 !== peg$FAILED) {
								while (s5 !== peg$FAILED) {
									s4.push(s5);
									if (peg$c5.test(input.charAt(peg$currPos))) {
										s5 = input.charAt(peg$currPos);
										peg$currPos++;
									} else {
										s5 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c6); }
									}
								}
							} else {
								s4 = peg$FAILED;
							}
							if (s4 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c13(s2, s4);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseBulletItem() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				s1 = [];
				if (peg$c11.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c12); }
				}
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						if (peg$c11.test(input.charAt(peg$currPos))) {
							s2 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c12); }
						}
					}
				} else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					if (peg$c14.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c15); }
					}
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 32) {
							s3 = peg$c16;
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c17); }
						}
						if (s3 !== peg$FAILED) {
							s4 = [];
							if (peg$c5.test(input.charAt(peg$currPos))) {
								s5 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s5 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c6); }
							}
							if (s5 !== peg$FAILED) {
								while (s5 !== peg$FAILED) {
									s4.push(s5);
									if (peg$c5.test(input.charAt(peg$currPos))) {
										s5 = input.charAt(peg$currPos);
										peg$currPos++;
									} else {
										s5 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c6); }
									}
								}
							} else {
								s4 = peg$FAILED;
							}
							if (s4 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c18(s4);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseToDoItem() {
				var s0, s1, s2, s3, s4, s5, s6, s7, s8;

				s0 = peg$currPos;
				s1 = [];
				if (peg$c11.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c12); }
				}
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						if (peg$c11.test(input.charAt(peg$currPos))) {
							s2 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c12); }
						}
					}
				} else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					if (input.substr(peg$currPos, 3) === peg$c19) {
						s2 = peg$c19;
						peg$currPos += 3;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c20); }
					}
					if (s2 !== peg$FAILED) {
						if (peg$c21.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c22); }
						}
						if (s3 === peg$FAILED) {
							s3 = null;
						}
						if (s3 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 32) {
								s4 = peg$c16;
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c17); }
							}
							if (s4 === peg$FAILED) {
								s4 = null;
							}
							if (s4 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 93) {
									s5 = peg$c23;
									peg$currPos++;
								} else {
									s5 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c24); }
								}
								if (s5 !== peg$FAILED) {
									s6 = [];
									if (peg$c11.test(input.charAt(peg$currPos))) {
										s7 = input.charAt(peg$currPos);
										peg$currPos++;
									} else {
										s7 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c12); }
									}
									if (s7 !== peg$FAILED) {
										while (s7 !== peg$FAILED) {
											s6.push(s7);
											if (peg$c11.test(input.charAt(peg$currPos))) {
												s7 = input.charAt(peg$currPos);
												peg$currPos++;
											} else {
												s7 = peg$FAILED;
												if (peg$silentFails === 0) { peg$fail(peg$c12); }
											}
										}
									} else {
										s6 = peg$FAILED;
									}
									if (s6 !== peg$FAILED) {
										s7 = [];
										if (peg$c5.test(input.charAt(peg$currPos))) {
											s8 = input.charAt(peg$currPos);
											peg$currPos++;
										} else {
											s8 = peg$FAILED;
											if (peg$silentFails === 0) { peg$fail(peg$c6); }
										}
										if (s8 !== peg$FAILED) {
											while (s8 !== peg$FAILED) {
												s7.push(s8);
												if (peg$c5.test(input.charAt(peg$currPos))) {
													s8 = input.charAt(peg$currPos);
													peg$currPos++;
												} else {
													s8 = peg$FAILED;
													if (peg$silentFails === 0) { peg$fail(peg$c6); }
												}
											}
										} else {
											s7 = peg$FAILED;
										}
										if (s7 !== peg$FAILED) {
											peg$savedPos = s0;
											s1 = peg$c25(s3, s4, s7);
											s0 = s1;
										} else {
											peg$currPos = s0;
											s0 = peg$FAILED;
										}
									} else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseToken() {
				var s0;

				s0 = peg$parseStrong();
				if (s0 === peg$FAILED) {
					s0 = peg$parseEmphasized();
					if (s0 === peg$FAILED) {
						s0 = peg$parseStrikeThrough();
						if (s0 === peg$FAILED) {
							s0 = peg$parseInlineCode();
							if (s0 === peg$FAILED) {
								s0 = peg$parseAtMention();
								if (s0 === peg$FAILED) {
									s0 = peg$parseHtmlLink();
									if (s0 === peg$FAILED) {
										s0 = peg$parseMarkdownLink();
										if (s0 === peg$FAILED) {
											s0 = peg$parseUrl();
											if (s0 === peg$FAILED) {
												if (peg$c5.test(input.charAt(peg$currPos))) {
													s0 = input.charAt(peg$currPos);
													peg$currPos++;
												} else {
													s0 = peg$FAILED;
													if (peg$silentFails === 0) { peg$fail(peg$c6); }
												}
											}
										}
									}
								}
							}
						}
					}
				}

				return s0;
			}

			function peg$parseStrong() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 2) === peg$c26) {
					s1 = peg$c26;
					peg$currPos += 2;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c27); }
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c28.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c29); }
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c28.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c29); }
							}
						}
					} else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						if (input.substr(peg$currPos, 2) === peg$c26) {
							s3 = peg$c26;
							peg$currPos += 2;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c27); }
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c30(s2);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					if (input.substr(peg$currPos, 2) === peg$c31) {
						s1 = peg$c31;
						peg$currPos += 2;
					} else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c32); }
					}
					if (s1 !== peg$FAILED) {
						s2 = [];
						if (peg$c33.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c34); }
						}
						if (s3 !== peg$FAILED) {
							while (s3 !== peg$FAILED) {
								s2.push(s3);
								if (peg$c33.test(input.charAt(peg$currPos))) {
									s3 = input.charAt(peg$currPos);
									peg$currPos++;
								} else {
									s3 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c34); }
								}
							}
						} else {
							s2 = peg$FAILED;
						}
						if (s2 !== peg$FAILED) {
							if (input.substr(peg$currPos, 2) === peg$c31) {
								s3 = peg$c31;
								peg$currPos += 2;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c32); }
							}
							if (s3 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c30(s2);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}

				return s0;
			}

			function peg$parseEmphasized() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 42) {
					s1 = peg$c35;
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c36); }
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c28.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c29); }
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c28.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c29); }
							}
						}
					} else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 42) {
							s3 = peg$c35;
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c36); }
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c37(s2);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 95) {
						s1 = peg$c38;
						peg$currPos++;
					} else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c39); }
					}
					if (s1 !== peg$FAILED) {
						s2 = [];
						if (peg$c33.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c34); }
						}
						if (s3 !== peg$FAILED) {
							while (s3 !== peg$FAILED) {
								s2.push(s3);
								if (peg$c33.test(input.charAt(peg$currPos))) {
									s3 = input.charAt(peg$currPos);
									peg$currPos++;
								} else {
									s3 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c34); }
								}
							}
						} else {
							s2 = peg$FAILED;
						}
						if (s2 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 95) {
								s3 = peg$c38;
								peg$currPos++;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c39); }
							}
							if (s3 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c37(s2);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				}

				return s0;
			}

			function peg$parseStrikeThrough() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 2) === peg$c40) {
					s1 = peg$c40;
					peg$currPos += 2;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c41); }
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c42.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c43); }
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c42.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c43); }
							}
						}
					} else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						if (input.substr(peg$currPos, 2) === peg$c40) {
							s3 = peg$c40;
							peg$currPos += 2;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c41); }
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c44(s2);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseInlineCode() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 96) {
					s1 = peg$c45;
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c46); }
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c47.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c48); }
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c47.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c48); }
							}
						}
					} else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 96) {
							s3 = peg$c45;
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c46); }
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c49(s2);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseAtMention() {
				var s0, s1, s2, s3, s4;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 64) {
					s1 = peg$c50;
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c51); }
				}
				if (s1 !== peg$FAILED) {
					if (peg$c52.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c53); }
					}
					if (s2 !== peg$FAILED) {
						s3 = [];
						if (peg$c54.test(input.charAt(peg$currPos))) {
							s4 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c55); }
						}
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							if (peg$c54.test(input.charAt(peg$currPos))) {
								s4 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c55); }
							}
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c56(s2, s3);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseUrl() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				s1 = peg$parseUrlScheme();
				if (s1 !== peg$FAILED) {
					if (input.substr(peg$currPos, 3) === peg$c57) {
						s2 = peg$c57;
						peg$currPos += 3;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c58); }
					}
					if (s2 !== peg$FAILED) {
						s3 = peg$parseUrlHost();
						if (s3 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 47) {
								s4 = peg$c59;
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c60); }
							}
							if (s4 === peg$FAILED) {
								s4 = null;
							}
							if (s4 !== peg$FAILED) {
								s5 = peg$parseUrlPath();
								if (s5 === peg$FAILED) {
									s5 = null;
								}
								if (s5 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c61(s1, s3, s4, s5);
									s0 = s1;
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseUrlScheme() {
				var s0, s1, s2, s3;

				s0 = peg$currPos;
				if (peg$c62.test(input.charAt(peg$currPos))) {
					s1 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c63); }
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c64.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c65); }
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c64.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c65); }
							}
						}
					} else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c66(s1, s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseUrlHost() {
				var s0, s1, s2, s3, s4, s5;

				s0 = peg$currPos;
				s1 = peg$parseUrlHostPart();
				if (s1 !== peg$FAILED) {
					s2 = [];
					s3 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 46) {
						s4 = peg$c67;
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c68); }
					}
					if (s4 !== peg$FAILED) {
						s5 = peg$parseUrlHostPart();
						if (s5 !== peg$FAILED) {
							peg$savedPos = s3;
							s4 = peg$c69(s1, s5);
							s3 = s4;
						} else {
							peg$currPos = s3;
							s3 = peg$FAILED;
						}
					} else {
						peg$currPos = s3;
						s3 = peg$FAILED;
					}
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						s3 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 46) {
							s4 = peg$c67;
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c68); }
						}
						if (s4 !== peg$FAILED) {
							s5 = peg$parseUrlHostPart();
							if (s5 !== peg$FAILED) {
								peg$savedPos = s3;
								s4 = peg$c69(s1, s5);
								s3 = s4;
							} else {
								peg$currPos = s3;
								s3 = peg$FAILED;
							}
						} else {
							peg$currPos = s3;
							s3 = peg$FAILED;
						}
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c70(s1, s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseUrlHostPart() {
				var s0, s1, s2;

				s0 = peg$currPos;
				s1 = [];
				if (peg$c71.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c72); }
				}
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						if (peg$c71.test(input.charAt(peg$currPos))) {
							s2 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c72); }
						}
					}
				} else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c73(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parseUrlPath() {
				var s0, s1, s2, s3, s4;

				s0 = peg$currPos;
				s1 = [];
				s2 = peg$currPos;
				s3 = peg$parseUrlPathPart();
				if (s3 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 47) {
						s4 = peg$c59;
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c60); }
					}
					if (s4 === peg$FAILED) {
						s4 = null;
					}
					if (s4 !== peg$FAILED) {
						peg$savedPos = s2;
						s3 = peg$c74(s3, s4);
						s2 = s3;
					} else {
						peg$currPos = s2;
						s2 = peg$FAILED;
					}
				} else {
					peg$currPos = s2;
					s2 = peg$FAILED;
				}
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						s2 = peg$currPos;
						s3 = peg$parseUrlPathPart();
						if (s3 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 47) {
								s4 = peg$c59;
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c60); }
							}
							if (s4 === peg$FAILED) {
								s4 = null;
							}
							if (s4 !== peg$FAILED) {
								peg$savedPos = s2;
								s3 = peg$c74(s3, s4);
								s2 = s3;
							} else {
								peg$currPos = s2;
								s2 = peg$FAILED;
							}
						} else {
							peg$currPos = s2;
							s2 = peg$FAILED;
						}
					}
				} else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c75(s1);
				}
				s0 = s1;

				return s0;
			}

			function peg$parseUrlPathPart() {
				var s0, s1, s2, s3, s4, s5, s6;

				s0 = peg$currPos;
				s1 = [];
				s2 = peg$parseUrlPathChar();
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						s2 = peg$parseUrlPathChar();
					}
				} else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					s3 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 46) {
						s4 = peg$c67;
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c68); }
					}
					if (s4 !== peg$FAILED) {
						s5 = [];
						s6 = peg$parseUrlPathChar();
						if (s6 !== peg$FAILED) {
							while (s6 !== peg$FAILED) {
								s5.push(s6);
								s6 = peg$parseUrlPathChar();
							}
						} else {
							s5 = peg$FAILED;
						}
						if (s5 !== peg$FAILED) {
							peg$savedPos = s3;
							s4 = peg$c76(s1, s5);
							s3 = s4;
						} else {
							peg$currPos = s3;
							s3 = peg$FAILED;
						}
					} else {
						peg$currPos = s3;
						s3 = peg$FAILED;
					}
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						s3 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 46) {
							s4 = peg$c67;
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c68); }
						}
						if (s4 !== peg$FAILED) {
							s5 = [];
							s6 = peg$parseUrlPathChar();
							if (s6 !== peg$FAILED) {
								while (s6 !== peg$FAILED) {
									s5.push(s6);
									s6 = peg$parseUrlPathChar();
								}
							} else {
								s5 = peg$FAILED;
							}
							if (s5 !== peg$FAILED) {
								peg$savedPos = s3;
								s4 = peg$c76(s1, s5);
								s3 = s4;
							} else {
								peg$currPos = s3;
								s3 = peg$FAILED;
							}
						} else {
							peg$currPos = s3;
							s3 = peg$FAILED;
						}
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c77(s1, s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseUrlPathChar() {
				var s0;

				if (peg$c78.test(input.charAt(peg$currPos))) {
					s0 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c79); }
				}

				return s0;
			}

			function peg$parseHtmlLink() {
				var s0, s1, s2, s3, s4, s5, s6, s7, s8;

				s0 = peg$currPos;
				if (input.substr(peg$currPos, 2) === peg$c80) {
					s1 = peg$c80;
					peg$currPos += 2;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c81); }
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c82.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c83); }
					}
					if (s3 !== peg$FAILED) {
						while (s3 !== peg$FAILED) {
							s2.push(s3);
							if (peg$c82.test(input.charAt(peg$currPos))) {
								s3 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c83); }
							}
						}
					} else {
						s2 = peg$FAILED;
					}
					if (s2 !== peg$FAILED) {
						s3 = [];
						s4 = peg$currPos;
						s5 = peg$parseHtmlAttribute();
						if (s5 !== peg$FAILED) {
							s6 = [];
							if (peg$c82.test(input.charAt(peg$currPos))) {
								s7 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s7 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c83); }
							}
							if (s7 !== peg$FAILED) {
								while (s7 !== peg$FAILED) {
									s6.push(s7);
									if (peg$c82.test(input.charAt(peg$currPos))) {
										s7 = input.charAt(peg$currPos);
										peg$currPos++;
									} else {
										s7 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c83); }
									}
								}
							} else {
								s6 = peg$FAILED;
							}
							if (s6 !== peg$FAILED) {
								peg$savedPos = s4;
								s5 = peg$c84(s5);
								s4 = s5;
							} else {
								peg$currPos = s4;
								s4 = peg$FAILED;
							}
						} else {
							peg$currPos = s4;
							s4 = peg$FAILED;
						}
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							s4 = peg$currPos;
							s5 = peg$parseHtmlAttribute();
							if (s5 !== peg$FAILED) {
								s6 = [];
								if (peg$c82.test(input.charAt(peg$currPos))) {
									s7 = input.charAt(peg$currPos);
									peg$currPos++;
								} else {
									s7 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c83); }
								}
								if (s7 !== peg$FAILED) {
									while (s7 !== peg$FAILED) {
										s6.push(s7);
										if (peg$c82.test(input.charAt(peg$currPos))) {
											s7 = input.charAt(peg$currPos);
											peg$currPos++;
										} else {
											s7 = peg$FAILED;
											if (peg$silentFails === 0) { peg$fail(peg$c83); }
										}
									}
								} else {
									s6 = peg$FAILED;
								}
								if (s6 !== peg$FAILED) {
									peg$savedPos = s4;
									s5 = peg$c84(s5);
									s4 = s5;
								} else {
									peg$currPos = s4;
									s4 = peg$FAILED;
								}
							} else {
								peg$currPos = s4;
								s4 = peg$FAILED;
							}
						}
						if (s3 !== peg$FAILED) {
							s4 = peg$parseHtmlAttribute();
							if (s4 === peg$FAILED) {
								s4 = null;
							}
							if (s4 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 47) {
									s5 = peg$c59;
									peg$currPos++;
								} else {
									s5 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c60); }
								}
								if (s5 === peg$FAILED) {
									s5 = null;
								}
								if (s5 !== peg$FAILED) {
									if (input.charCodeAt(peg$currPos) === 62) {
										s6 = peg$c9;
										peg$currPos++;
									} else {
										s6 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c10); }
									}
									if (s6 !== peg$FAILED) {
										s7 = [];
										if (peg$c85.test(input.charAt(peg$currPos))) {
											s8 = input.charAt(peg$currPos);
											peg$currPos++;
										} else {
											s8 = peg$FAILED;
											if (peg$silentFails === 0) { peg$fail(peg$c86); }
										}
										if (s8 !== peg$FAILED) {
											while (s8 !== peg$FAILED) {
												s7.push(s8);
												if (peg$c85.test(input.charAt(peg$currPos))) {
													s8 = input.charAt(peg$currPos);
													peg$currPos++;
												} else {
													s8 = peg$FAILED;
													if (peg$silentFails === 0) { peg$fail(peg$c86); }
												}
											}
										} else {
											s7 = peg$FAILED;
										}
										if (s7 !== peg$FAILED) {
											if (input.substr(peg$currPos, 4) === peg$c87) {
												s8 = peg$c87;
												peg$currPos += 4;
											} else {
												s8 = peg$FAILED;
												if (peg$silentFails === 0) { peg$fail(peg$c88); }
											}
											if (s8 !== peg$FAILED) {
												peg$savedPos = s0;
												s1 = peg$c89(s3, s4, s7);
												s0 = s1;
											} else {
												peg$currPos = s0;
												s0 = peg$FAILED;
											}
										} else {
											peg$currPos = s0;
											s0 = peg$FAILED;
										}
									} else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseHtmlAttribute() {
				var s0, s1, s2, s3, s4;

				s0 = peg$currPos;
				s1 = [];
				if (peg$c52.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c53); }
				}
				if (s2 !== peg$FAILED) {
					while (s2 !== peg$FAILED) {
						s1.push(s2);
						if (peg$c52.test(input.charAt(peg$currPos))) {
							s2 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c53); }
						}
					}
				} else {
					s1 = peg$FAILED;
				}
				if (s1 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 61) {
						s2 = peg$c90;
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c91); }
					}
					if (s2 !== peg$FAILED) {
						s3 = peg$currPos;
						s4 = peg$parseQuotedString();
						if (s4 !== peg$FAILED) {
							peg$savedPos = s3;
							s4 = peg$c92(s1, s4);
						}
						s3 = s4;
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c93(s1, s3);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseQuotedString() {
				var s0, s1, s2, s3, s4;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 34) {
					s1 = peg$c94;
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c95); }
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$currPos;
					s3 = [];
					if (peg$c96.test(input.charAt(peg$currPos))) {
						s4 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c97); }
					}
					while (s4 !== peg$FAILED) {
						s3.push(s4);
						if (peg$c96.test(input.charAt(peg$currPos))) {
							s4 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c97); }
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s2;
						s3 = peg$c98(s3);
					}
					s2 = s3;
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 34) {
							s3 = peg$c94;
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c95); }
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c99(s2);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseMarkdownLink() {
				var s0, s1, s2, s3, s4, s5, s6;

				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 91) {
					s1 = peg$c100;
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c101); }
				}
				if (s1 !== peg$FAILED) {
					s2 = [];
					if (peg$c102.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c103); }
					}
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						if (peg$c102.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c103); }
						}
					}
					if (s2 !== peg$FAILED) {
						if (input.substr(peg$currPos, 2) === peg$c104) {
							s3 = peg$c104;
							peg$currPos += 2;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c105); }
						}
						if (s3 !== peg$FAILED) {
							s4 = peg$currPos;
							s5 = [];
							if (peg$c106.test(input.charAt(peg$currPos))) {
								s6 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s6 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c107); }
							}
							if (s6 !== peg$FAILED) {
								while (s6 !== peg$FAILED) {
									s5.push(s6);
									if (peg$c106.test(input.charAt(peg$currPos))) {
										s6 = input.charAt(peg$currPos);
										peg$currPos++;
									} else {
										s6 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c107); }
									}
								}
							} else {
								s5 = peg$FAILED;
							}
							if (s5 !== peg$FAILED) {
								peg$savedPos = s4;
								s5 = peg$c108(s2, s5);
							}
							s4 = s5;
							if (s4 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 41) {
									s5 = peg$c109;
									peg$currPos++;
								} else {
									s5 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c110); }
								}
								if (s5 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c111(s2, s4);
									s0 = s1;
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}

				return s0;
			}

			function peg$parseNewline() {
				var s0;

				if (peg$c112.test(input.charAt(peg$currPos))) {
					s0 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c113); }
				}

				return s0;
			}

			peg$result = peg$startRuleFunction();

			if (peg$result !== peg$FAILED && peg$currPos === input.length) {
				return peg$result;
			} else {
				if (peg$result !== peg$FAILED && peg$currPos < input.length) {
					peg$fail(peg$endExpectation());
				}

				throw peg$buildStructuredError(
					peg$maxFailExpected,
					peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
					peg$maxFailPos < input.length
						? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
						: peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
				);
			}
		}

		return {
			SyntaxError: peg$SyntaxError,
			parse:       peg$parse
		};
	})();
